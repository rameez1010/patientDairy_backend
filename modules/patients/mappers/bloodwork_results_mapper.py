from typing import Any, Dict

from models.patient_models import BioMarker, BloodWorkResults


class BloodworkResultsMapper:
    @staticmethod
    def parse_bloodwork_result(response: Dict[str, Any], key: str) -> float | None:
        """Helper function to parse lab results generated by Gemini safely."""
        if key in response:
            if isinstance(response[key], dict) and response[key].get("number") is not None:
                num_str = str(response[key]["number"]).replace("<", "").replace(">", "")
                return float(num_str)
            elif key == "sex" or key == "age" or key == "date_of_birth" or key == "patient" or key == "name":
                return response[key]
        return None

    @staticmethod
    def parse_gene_result(response: Dict[str, Any], gene_name: str) -> str | None:
        """Helper function to parse gene result from the response."""
        return response.get(gene_name, None)

    @staticmethod
    def map_to_bloodwork_results(response: Dict[str, Any]) -> BloodWorkResults:
        """Maps Gemini AI response to BloodWorkResults model"""
        return BloodWorkResults(
            cholesterol=BloodworkResultsMapper.parse_bloodwork_result(response, "cholesterol"),
            ldlCholesterol=BloodworkResultsMapper.parse_bloodwork_result(response, "ldl_cholesterol"),
            hdlCholesterol=BloodworkResultsMapper.parse_bloodwork_result(response, "hdl_cholesterol"),
            nonHdlCholesterol=BloodworkResultsMapper.parse_bloodwork_result(response, "non_hdl_cholesterol"),
            triglyceride=BloodworkResultsMapper.parse_bloodwork_result(response, "triglycerides"),
            cholesterolToHdlRatio=BloodworkResultsMapper.parse_bloodwork_result(response, "cholesterol_to_hdl_ratio"),
            hbA1c=BloodworkResultsMapper.parse_bloodwork_result(response, "hemoglobin_a1c_hba1c"),
            creatinine=BloodworkResultsMapper.parse_bloodwork_result(response, "Creatinine"),
            eGFR=BloodworkResultsMapper.parse_bloodwork_result(response, "Glomerular_Filtration_Rate_eGFR"),
            sodium=BloodworkResultsMapper.parse_bloodwork_result(response, "Sodium"),
            potassium=BloodworkResultsMapper.parse_bloodwork_result(response, "Potassium"),
            phosphorus=BloodworkResultsMapper.parse_bloodwork_result(response, "Phosphorus"),
            totalBilirubin=BloodworkResultsMapper.parse_bloodwork_result(response, "Total_Bilirubin"),
            calcium=BloodworkResultsMapper.parse_bloodwork_result(response, "Calcium"),
            albumin=BloodworkResultsMapper.parse_bloodwork_result(response, "Albumin"),
            sedimentationRate=BloodworkResultsMapper.parse_bloodwork_result(response, "Sedimentation_rate_ESR"),
            vitaminD=BloodworkResultsMapper.parse_bloodwork_result(response, "Vitamin_D_25_Hydroxy"),
            vitaminB12=BloodworkResultsMapper.parse_bloodwork_result(response, "Vitamin_B12"),
            ferritin=BloodworkResultsMapper.parse_bloodwork_result(response, "Ferritin"),
            progesterone=BloodworkResultsMapper.parse_bloodwork_result(response, "Progesterone"),
            prolactin=BloodworkResultsMapper.parse_bloodwork_result(response, "Prolactin_Total"),
            sexHormoneBindGlobulin=BloodworkResultsMapper.parse_bloodwork_result(response, "Sex_Hormone_Bind_Globulin"),
            reverseT3=BloodworkResultsMapper.parse_bloodwork_result(response, "Reverse_T3"),
            freeT3=BloodworkResultsMapper.parse_bloodwork_result(response, "Free_Triiodothyrodnine_T3"),
            freeT4=BloodworkResultsMapper.parse_bloodwork_result(response, "Free_Thyroxine_T4"),
            testosteroneFree=BloodworkResultsMapper.parse_bloodwork_result(response, "Testosterone_Free"),
            follitropin=BloodworkResultsMapper.parse_bloodwork_result(response, "Follitropin_FSH"),
            lutropin=BloodworkResultsMapper.parse_bloodwork_result(response, "Lutropin_LH"),
            testosterone=BloodworkResultsMapper.parse_bloodwork_result(response, "Testosterone"),
            magnesium=BloodworkResultsMapper.parse_bloodwork_result(response, "Magnesium"),
            zinc=BloodworkResultsMapper.parse_bloodwork_result(response, "Zinc"),
            vitaminA=BloodworkResultsMapper.parse_bloodwork_result(response, "Vitamin_A"),
            cortisolAm=BloodworkResultsMapper.parse_bloodwork_result(response, "Cortisol_am"),
            totalPsa=BloodworkResultsMapper.parse_bloodwork_result(response, "Total_PSA"),
            dhea=BloodworkResultsMapper.parse_bloodwork_result(response, "DHEA"),
            estradiol=BloodworkResultsMapper.parse_bloodwork_result(response, "Estradiol"),
            alkalinePhosphate=BloodworkResultsMapper.parse_bloodwork_result(response, "Alkaline_Phosphate_ALP"),
            alanineTransaminase=BloodworkResultsMapper.parse_bloodwork_result(response, "Alanine_Transaminase_ALT"),
            aspartateTransaminase=BloodworkResultsMapper.parse_bloodwork_result(response, "Aspartate_Transaminase_AST"),
            gammaGlutamylTransferase=BloodworkResultsMapper.parse_bloodwork_result(
                response, "Gamma_Glutamyl_Transferase_GGT"
            ),
            thyroidStimulatingHormone=BloodworkResultsMapper.parse_bloodwork_result(
                response, "Thyroid_Stimulating_Hormone_TSH"
            ),
            thyroidPeroxidaseAntibody=BloodworkResultsMapper.parse_bloodwork_result(
                response, "Thyroid_Peroxidase_Antibody_TPO"
            ),
            thyroglobulinAntibodies=BloodworkResultsMapper.parse_bloodwork_result(
                response, "Thyroglobulin_Antibodies_Anti_TG"
            ),
            seleniumPlasma=BloodworkResultsMapper.parse_bloodwork_result(response, "Selenium_plasma"),
            cReactiveProtein=BloodworkResultsMapper.parse_bloodwork_result(response, "C_Reactive_Protien"),
            hemoglobin=BloodworkResultsMapper.parse_bloodwork_result(response, "Hemoglobin"),
            hematocrit=BloodworkResultsMapper.parse_bloodwork_result(response, "Hematocrit"),
            rbc=BloodworkResultsMapper.parse_bloodwork_result(response, "RBC"),
            wbc=BloodworkResultsMapper.parse_bloodwork_result(response, "WBC"),
            neutrophils=BloodworkResultsMapper.parse_bloodwork_result(response, "Neutrophils"),
            lymphocytes=BloodworkResultsMapper.parse_bloodwork_result(response, "Lymphocytes"),
            monocytes=BloodworkResultsMapper.parse_bloodwork_result(response, "Monocytes"),
            eosinophils=BloodworkResultsMapper.parse_bloodwork_result(response, "Eosinophils"),
            basophils=BloodworkResultsMapper.parse_bloodwork_result(response, "Basophils"),
            mcv=BloodworkResultsMapper.parse_bloodwork_result(response, "MCV"),
            mch=BloodworkResultsMapper.parse_bloodwork_result(response, "MCH"),
            mchc=BloodworkResultsMapper.parse_bloodwork_result(response, "MCHC"),
            rdw=BloodworkResultsMapper.parse_bloodwork_result(response, "RDW"),
            plateletCount=BloodworkResultsMapper.parse_bloodwork_result(response, "Platelet_Count"),
            sex=BloodworkResultsMapper.parse_bloodwork_result(response, "sex"),
            collectionDate=BloodworkResultsMapper.parse_gene_result(response, "collection_date"),
            insulin=BloodworkResultsMapper.parse_bloodwork_result(response, "Insulin"),
            glucose=BloodworkResultsMapper.parse_bloodwork_result(response, "Glucose"),
            uricAcid=BloodworkResultsMapper.parse_bloodwork_result(response, "Uric_Acid"),
            fibrinogen=BloodworkResultsMapper.parse_bloodwork_result(response, "Fibrinogen"),
            age=BloodworkResultsMapper.parse_bloodwork_result(response, "age"),
            patient=BloodworkResultsMapper.parse_bloodwork_result(response, "patient"),
            name=BloodworkResultsMapper.parse_bloodwork_result(response, "name"),
            dateOfBirth=BloodworkResultsMapper.parse_bloodwork_result(response, "date_of_birth"),
        )

    @staticmethod
    def map_to_bio_marker(name: str, title: str, value: float, unit: str, range_status: str) -> BioMarker:
        """Maps individual biomarker data to BioMarker model"""
        return BioMarker(name=name, title=title, value=value, unit=unit, range_status=range_status)
